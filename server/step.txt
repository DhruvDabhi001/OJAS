OJAS-Backend/
│
├── config/              # Environment configs, DB connection
│   └── db.js
│
├── controllers/         # Route logic separated from routes
│   ├── authController.js
│   ├── userController.js
│   └── jobController.js
│
├── middleware/          # Auth, error handling, etc.
│   ├── authMiddleware.js
│   └── errorMiddleware.js
│
├── models/              # Mongoose schemas
│   ├── User.js
│   └── Job.js
│
├── routes/              # Express routes
│   ├── authRoutes.js
│   ├── userRoutes.js
│   └── jobRoutes.js
│
├── utils/               # Utility functions (e.g., validators, mailers)
│   └── generateToken.js
│
├── .env                 # Environment variables
├── .gitignore
├── server.js            # Entry point
└── package.json


// node index.js ( for start project via this file )

const express = require('express'); // ( import express )
const mongoose = require('mongoose'); // ( import mongodb )
const cors = require('cors');  // ( for communicate frontend to backend )

const app = express(); // ( initialize application ) which helps to define routes
app.use(cors());
app.use(express.json());

// MongoDB connection
const mongoURI = 'mongodb://localhost:27017/ojas-jobportal';  // ( connection string , database name )

mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected successfully'))
.catch(err => console.error('MongoDB connection error:', err));

// this schema define struture of our database
const userSchema = new mongoose.Schema({
  fullName: { type: String, required: true },
  email:    { type: String, required: true, unique: true },
  password: { type: String, required: true }
});
const User = mongoose.model('User', userSchema);

// Signup route
app.post('/signup', async (req, res) => {
  const { fullName, email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already registered' });
    }

    const newUser = new User({ fullName, email, password });
    await newUser.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    res.status(500).json({ message: 'Signup failed', error: err.message });
  }
});

// ✅ Login route - updated to return fullName
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  // Check admin credentials here in backend if you want, or only in frontend

  const ADMIN_EMAIL = "admin@example.com";
  const ADMIN_PASSWORD = "11";

  if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {
    // If admin credentials match, send admin success response
    return res.status(200).json({
      message: 'Admin login successful',
      fullName: 'Admin',
      email: ADMIN_EMAIL,
      isAdmin: true // you can send this flag to frontend
    });
  }

  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(400).json({ message: 'User not found' });
    }

    if (user.password !== password) {
      return res.status(401).json({ message: 'Invalid password' });
    }

    // Send user info if login successful
    res.status(200).json({
      message: 'Login successful',
      fullName: user.fullName,
      email: user.email,
      isAdmin: false
    });
  } catch (err) {
    res.status(500).json({ message: 'Login failed', error: err.message });
  }
});


const PORT = 5000;

// for update profile
app.put('/Profile', async (req, res) => {
  const { email, fullName, password } = req.body;

  if (!email || !fullName || !password) {
    return res.status(400).json({ message: 'All fields are required.' });
  }

  try {
    const user = await User.findOneAndUpdate(
      { email },
      { fullName, password },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.status(200).json({ message: 'Profile updated successfully.' });
  } catch (err) {
    res.status(500).json({ message: 'Update failed', error: err.message });
  }
});

app.listen(PORT, () => {
  console.log(`✅ Server is running on http://localhost:${PORT}`);
});